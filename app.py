import streamlit as st
import pandas as pd
from datetime import datetime, timedelta, date
import random
import io

TYPES = ["–°–æ–≤–µ—Ç","–û–±–∑–æ—Ä –æ–±—ä–µ–∫—Ç–∞","–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–∫–∏","–†—ã–Ω–æ–∫/–∞–Ω–∞–ª–∏—Ç–∏–∫–∞","FAQ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è","–ò–ø–æ—Ç–µ–∫–∞/—Å—Ç–∞–≤–∫–∏","–†–∞–π–æ–Ω vs —Ä–∞–π–æ–Ω"]
CITIES = ["–ò–∂–µ–≤—Å–∫","–ö–∞–∑–∞–Ω—å","–ü–µ—Ä–º—å","–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥","–£—Ñ–∞","–¢—é–º–µ–Ω—å","–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥","–°–∞–º–∞—Ä–∞","–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥","–ú–æ—Å–∫–≤–∞"]
DISTRICTS = ["—Ü–µ–Ω—Ç—Ä","–Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥","–ø—Ä–∏–≥–æ—Ä–æ–¥","—Å–ø–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω","–¥–µ–ª–æ–≤–æ–π –∫–≤–∞—Ä—Ç–∞–ª","—Ä–∞–π–æ–Ω —É –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π"]
HOOKS = [
    "3 –æ—à–∏–±–∫–∏, –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Ä—è—é—Ç –¥–µ–Ω—å–≥–∏",
    "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑–æ–≤",
    "–ß—Ç–æ –Ω–µ —Ä–∞—Å—Å–∫–∞–∂—É—Ç –≤ —Ä–µ–∫–ª–∞–º–µ",
    "–ì–∏–¥ –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö",
    "–¢–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã"
]
CTA = [
    "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ—Å—Ç ‚Äî –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è.",
    "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ –õ–° ‚Äî –æ—Ç–≤–µ—á—É —Å–µ–≥–æ–¥–Ω—è.",
    "–ù—É–∂–µ–Ω –ø–æ–¥–±–æ—Ä? –ù–∞–ø–∏—à–∏—Ç–µ ¬´–ü–û–î–ë–û–†¬ª.",
    "–ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –ø–æ–∫–∞–∑?"
]

def rand(arr): return random.choice(arr)

def make_title(t):
    city, dA, dB = rand(CITIES), rand(DISTRICTS), rand(DISTRICTS)
    if t == "–°–æ–≤–µ—Ç": return f"{rand(HOOKS)} –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≤ {city}"
    if t == "–û–±–∑–æ—Ä –æ–±—ä–µ–∫—Ç–∞": return f"–û–±–∑–æ—Ä: –¥–≤—É—à–∫–∞ –≤ {dA}, {city} ‚Äî —Å—Ç–æ–∏—Ç –ª–∏ –±—Ä–∞—Ç—å?"
    if t == "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–∫–∏": return "–ö–∞–∫ –º—ã —Å–±–∏–ª–∏ —Ü–µ–Ω—É –Ω–∞ 350 —Ç—ã—Å.: —Ä–µ–∞–ª—å–Ω—ã–π –∫–µ–π—Å"
    if t == "–†—ã–Ω–æ–∫/–∞–Ω–∞–ª–∏—Ç–∏–∫–∞": return f"{city}: —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å —Ü–µ–Ω–∞–º–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
    if t == "FAQ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è": return "–û—Ç–≤–µ—á–∞—é –Ω–∞ —á–∞—Å—Ç—ã–π –≤–æ–ø—Ä–æ—Å: —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ø–æ–∫–∞–∑–µ"
    if t == "–ò–ø–æ—Ç–µ–∫–∞/—Å—Ç–∞–≤–∫–∏": return "–ò–ø–æ—Ç–µ–∫–∞ –±–µ–∑ –ø–∞–Ω–∏–∫–∏: –∫–∞–∫ —á–∏—Ç–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –±–∞–Ω–∫–∞"
    if t == "–†–∞–π–æ–Ω vs —Ä–∞–π–æ–Ω": return f"{dA} vs {dB}: –≥–¥–µ –∂–∏—Ç—å —É–¥–æ–±–Ω–µ–µ –≤ {city}?"
    return f"–ü–æ–ª–µ–∑–Ω–æ–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –≤ {city}"

def make_text(t, tone):
    if tone == "–î—Ä—É–∂–µ—Å–∫–∞—è":
        tone_line = "–ü–∏—à—É –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤."
    elif tone == "–õ–µ–≥–∫–∏–π —é–º–æ—Ä":
        tone_line = "–ù–µ–º–Ω–æ–≥–æ –∏—Ä–æ–Ω–∏–∏ ‚Äî –Ω–æ –ø–æ –¥–µ–ª—É."
    else:
        tone_line = "–ö–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö –ª—é–¥–µ–π."
    benefits = [
        "—Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É –º¬≤, –Ω–æ –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ ‚Äî —Ä–µ–º–æ–Ω—Ç, –º–µ–±–µ–ª—å, –∫–æ–º–º—É–Ω–∞–ª–∫–∞;",
        "—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —à—É–º, —Å–æ–ª–Ω—Ü–µ –∏ –¥–≤–æ—Ä –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫;",
        "—É–∑–Ω–∞–≤–∞–π—Ç–µ –ø–ª–∞–Ω —Ä–µ–º–æ–Ω—Ç–∞ —É –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –∏ —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ–ª—â–∏–Ω—É —Å—Ç–µ–Ω;",
        "–ø—Ä–æ—Å–∏—Ç–µ —Ä–∞—Å—á—ë—Ç –∏–ø–æ—Ç–µ–∫–∏ —É 2‚Äì3 –±–∞–Ω–∫–æ–≤ ‚Äî –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —Ä–∞–∑–Ω–∏—Ü–∞;",
        "–Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è ‚Äî –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ä–µ—à–∞—é—Ç."
    ]
    return "\n".join([
        tone_line,
        f"–ß—Ç–æ –≤–∞–∂–Ω–æ: {rand(benefits)} {rand(benefits)}",
        "–ú–æ–π —Å–æ–≤–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (—Ä–∞–π–æ–Ω, –±—é–¥–∂–µ—Ç, —Å—Ä–æ–∫–∏), –ø–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã.",
        rand(CTA)
    ])

def make_tags(t, platform):
    base = ["#–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å","#–∫–≤–∞—Ä—Ç–∏—Ä–∞","#–ø–æ–∫—É–ø–∫–∞","#–∏–ø–æ—Ç–µ–∫–∞","#—Ä–∏–µ–ª—Ç–æ—Ä","#—Å–æ–≤–µ—Ç—ã"]
    spec = {
        "–°–æ–≤–µ—Ç":["#–ª–∞–π—Ñ—Ö–∞–∫–∏","#—á–µ–∫–ª–∏—Å—Ç"],
        "–û–±–∑–æ—Ä –æ–±—ä–µ–∫—Ç–∞":["#–æ–±–∑–æ—Ä","#–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞","#–≤—Ç–æ—Ä–∏—á–∫–∞"],
        "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–∫–∏":["#—Ä–µ–∞–ª—å–Ω—ã–π–∫–µ–π—Å","#–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã"],
        "–†—ã–Ω–æ–∫/–∞–Ω–∞–ª–∏—Ç–∏–∫–∞":["#–∞–Ω–∞–ª–∏—Ç–∏–∫–∞","#—Ü–µ–Ω—ã","#—Å—Ç–∞–≤–∫–∏"],
        "FAQ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è":["#–≤–æ–ø—Ä–æ—Å–æ—Ç–≤–µ—Ç","#faq"],
        "–ò–ø–æ—Ç–µ–∫–∞/—Å—Ç–∞–≤–∫–∏":["#–±–∞–Ω–∫","#–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è—Å—Ç–∞–≤–∫–∞"],
        "–†–∞–π–æ–Ω vs —Ä–∞–π–æ–Ω":["#–ª–æ–∫–∞—Ü–∏—è","#—Ä–∞–π–æ–Ω"]
    }.get(t, [])
    plat = {"Telegram":["#—Ç–µ–ª–µ–≥—Ä–∞–º"], "VK":["#–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ"], "Instagram":["#instagram"]}.get(platform, [])
    return " ".join(base + spec + plat)

def start_of_week(d: date) -> date:
    return d - timedelta(days=(d.weekday()))

def generate_week(start: date, platforms, posts_per_week, tone):
    rows = []
    for p in platforms:
        days = list(range(7))
        random.shuffle(days)
        chosen = sorted(days[:max(1, min(7, posts_per_week))])
        for offset in chosen:
            dt = start + timedelta(days=offset)
            typ = rand(TYPES)
            rows.append({
                "–î–∞—Ç–∞": dt.strftime("%Y-%m-%d"),
                "–í—Ä–µ–º—è": "09:00",
                "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞": p,
                "–¢–∏–ø": typ,
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫": make_title(typ),
                "–¢–µ–∫—Å—Ç": make_text(typ, tone),
                "–•—ç—à—Ç–µ–≥–∏": make_tags(typ, p),
                "–°—Ç–∞—Ç—É—Å": "–ß–µ—Ä–Ω–æ–≤–∏–∫"
            })
    df = pd.DataFrame(rows).sort_values(["–î–∞—Ç–∞","–í—Ä–µ–º—è","–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞"]).reset_index(drop=True)
    return df

def to_csv_bytes(df: pd.DataFrame) -> bytes:
    return df.to_csv(index=False).encode("utf-8")

def to_ics_bytes(df: pd.DataFrame) -> bytes:
    def z(n): return str(n).zfill(2)
    lines = ["BEGIN:VCALENDAR","VERSION:2.0","PRODID:-//Realtor Planner//RU"]
    for i, row in df.iterrows():
        y, m, d = row["–î–∞—Ç–∞"].split("-")
        hh, mm = (row.get("–í—Ä–µ–º—è","09:00") or "09:00").split(":")
        dt = f"{y}{m}{d}T{z(hh)}{z(mm)}00"
        summary = f"{row['–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞']} ¬∑ {row['–ó–∞–≥–æ–ª–æ–≤–æ–∫']}".replace("\n","\\n").replace(",","\\,").replace(";","\\;")
        desc = (f"{row['–¢–µ–∫—Å—Ç']}\n\n{row['–•—ç—à—Ç–µ–≥–∏']}").replace("\n","\\n").replace(",","\\,").replace(";","\\;")
        uid = f"{i}-{row['–î–∞—Ç–∞']}-{row['–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞']}"
        lines += [
            "BEGIN:VEVENT",
            f"UID:{uid}",
            f"DTSTART:{dt}",
            f"SUMMARY:{summary}",
            f"DESCRIPTION:{desc}",
            "END:VEVENT"
        ]
    lines.append("END:VCALENDAR")
    return ("\r\n".join(lines)).encode("utf-8")

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∏–µ–ª—Ç–æ—Ä–æ–≤", page_icon="üìÖ", layout="wide")
st.title("üìÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∏–µ–ª—Ç–æ—Ä–æ–≤ ‚Äî Python (Streamlit)")

with st.sidebar:
    st.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    tone = st.selectbox("–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", ["–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è","–î—Ä—É–∂–µ—Å–∫–∞—è","–õ–µ–≥–∫–∏–π —é–º–æ—Ä"])
    platforms = st.multiselect("–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã", ["VK","Telegram","Instagram"], default=["VK","Telegram","Instagram"])
    posts_per_week = st.number_input("–ü–æ—Å—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é (–Ω–∞ –∫–∞–∂–¥—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É)", 1, 7, 3)
    start_input = st.date_input("–ù–µ–¥–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è", start_of_week(date.today()))
    start_week = start_of_week(start_input)
    st.caption("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–µ–¥–µ–ª—è —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞.")

col1, col2 = st.columns([1,1])
with col1:
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—é", use_container_width=True):
        st.session_state["plan"] = generate_week(start_week, platforms, posts_per_week, tone)
with col2:
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
        st.session_state["plan"] = pd.DataFrame(columns=["–î–∞—Ç–∞","–í—Ä–µ–º—è","–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞","–¢–∏–ø","–ó–∞–≥–æ–ª–æ–≤–æ–∫","–¢–µ–∫—Å—Ç","–•—ç—à—Ç–µ–≥–∏","–°—Ç–∞—Ç—É—Å"])

plan: pd.DataFrame = st.session_state.get("plan", pd.DataFrame(columns=["–î–∞—Ç–∞","–í—Ä–µ–º—è","–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞","–¢–∏–ø","–ó–∞–≥–æ–ª–æ–≤–æ–∫","–¢–µ–∫—Å—Ç","–•—ç—à—Ç–µ–≥–∏","–°—Ç–∞—Ç—É—Å"]))

st.markdown("### –ü–ª–∞–Ω (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π)")
edited = st.data_editor(
    plan,
    num_rows="dynamic",
    use_container_width=True,
    height=480,
    column_config={
        "–î–∞—Ç–∞": st.column_config.DateColumn(format="YYYY-MM-DD"),
        "–í—Ä–µ–º—è": st.column_config.TextColumn(help="–Ω–∞–ø—Ä–∏–º–µ—Ä 09:00"),
        "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞": st.column_config.SelectboxColumn(options=["VK","Telegram","Instagram"]),
        "–¢–∏–ø": st.column_config.SelectboxColumn(options=TYPES),
        "–°—Ç–∞—Ç—É—Å": st.column_config.SelectboxColumn(options=["–ß–µ—Ä–Ω–æ–≤–∏–∫","–ì–æ—Ç–æ–≤–æ","–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"]),
        "–•—ç—à—Ç–µ–≥–∏": st.column_config.TextColumn(help="—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    }
)
st.session_state["plan"] = edited

total = len(edited)
done = (edited["–°—Ç–∞—Ç—É—Å"] != "–ß–µ—Ä–Ω–æ–≤–∏–∫").sum() if total else 0
st.info(f"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {done}/{total}")

colA, colB, colC = st.columns(3)
with colA:
    st.download_button("‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç CSV", data=to_csv_bytes(edited), file_name=f"content-plan-{start_week}.csv", mime="text/csv")
with colB:
    st.download_button("‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç ICS", data=to_ics_bytes(edited), file_name=f"content-plan-{start_week}.ics", mime="text/calendar")
with colC:
    st.caption("–ò–º–ø–æ—Ä—Ç CSV –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ (–ø–∞—Ä—Å–µ—Ä + –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞).")

st.caption("¬© –¢–≤–æ–π –ø—Ä–æ—Ç–æ—Ç–∏–ø –Ω–∞ Python/Streamlit. –î–∞–ª—å—à–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å Google Sheets, –ë–î –∏–ª–∏ ChatGPT API.")
